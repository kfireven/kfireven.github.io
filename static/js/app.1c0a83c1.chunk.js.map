{"version":3,"sources":["webpack:///D:/Addinonal Data/Computer Science/Projects/react-native/WeatherApp-Kfir-Even-27-06-2021/src/components/Map/mapStyles.css?ce04","src/components/Map/mapStyles.css","assets/img/satImage.jpg","assets/img/radarImage.jpg","webpack:///D:/Addinonal Data/Computer Science/Projects/react-native/WeatherApp-Kfir-Even-27-06-2021/src/components/InfoScreen/InfoScreenStyles.css?c57c","src/components/InfoScreen/InfoScreenStyles.css","webpack:///D:/Addinonal Data/Computer Science/Projects/react-native/WeatherApp-Kfir-Even-27-06-2021/src/components/FavoritesScreen/FavoritesScreenStyles.css?7a0a","src/components/FavoritesScreen/FavoritesScreenStyles.css","src/components/InfoScreen/infoScreenReducers.js","src/components/FavoritesScreen/favoritesScreenReducers.js","src/Store.js","src/components/Main/mainStyles.js","src/components/Map/Map.jsx","src/components/FavoritesScreen/favoritesScreenActions.js","src/components/InfoScreen/infoScreenActions.js","src/Apis.js","src/components/InfoScreen/InfoScreen.jsx","src/components/FavoritesScreen/FavoritesScreen.jsx","src/components/Main/Main.jsx","src/App.js"],"names":["api","content","__esModule","default","module","i","options","exports","locals","___CSS_LOADER_API_IMPORT___","___CSS_LOADER_GET_URL_IMPORT___","___CSS_LOADER_URL_IMPORT_0___","___CSS_LOADER_URL_IMPORT_1___","___CSS_LOADER_URL_REPLACEMENT_0___","___CSS_LOADER_URL_REPLACEMENT_1___","push","initialState","cityName","countryName","cityCode","temputure","weatherStatus","weatherDay1","weatherDay2","weatherDay3","weatherDay4","weatherDay5","isSatView","favorites","isCurrentCityFavorite","reducers","combineReducers","infoScreen","state","action","type","condition","favoritesScreen","favs","store","createStore","applyMiddleware","thunk","mainStyles","StyleSheet","create","menuView","backgroundColor","position","width","height","menuViewLightMode","mainView","top","left","borderTopLeftRadius","mainViewLightMode","TextStyle","fontSize","fontWeight","letterSpacing","color","menuButtons","borderRadius","alignItems","justifyContent","cursor","INFObutton","marginTop","FAVSbutton","Map","useSelector","className","removeFromFavorites","favToRemove","JSON","parse","localStorage","getItem","splice","indexOf","setItem","stringify","selectedCityTempeture","dispatch","locKey","fetch","then","response","json","data","catch","err","console","log","res","updateSelectedCityTempeture","Temperature","Metric","Value","WeatherText","fiveDayForecast","updateFiveDayForecast","Days","Date","DailyForecasts","getDay","Maximum","Minimum","InfoScreen","props","isCelsiusMode","newProps","this","isExistsInfavorites","city","includes","isCurrentCityFav","e","target","value","isSetSatView","toFixed","isDarkMode","style","convertToFahrenheit","ButtonGroup","onClick","handleClickSatRad","bind","Button","active","addToFavorites","setState","setDarkMode","whiteSpace","split","Component","connect","fav","FavoritesScreen","fillTable","clearFavTable","document","getElementById","remove","toogleView","fillWeatherInfo","LocalizedName","Country","Key","table","createElement","setAttribute","cssText","appendChild","row","insertRow","cell1","insertCell","cell2","favCityClickBtnId","removeFromFavBtnId","innerHTML","val","addEventListener","favCityClick","length","id","Main","useState","setData","query","isInfoView","setIsInfoView","useDispatch","useEffect","fillFavorites","values","View","Autocomplete","disableClearable","forcePopupIcon","label","getOptionLabel","option","onInputChange","txt","q","onChange","event","renderInput","params","TextField","variant","fullWidth","Pressable","title","onPress","Text","StatusBar","App"],"mappings":"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","file":"static/js/app.1c0a83c1.chunk.js","sourcesContent":["var api = require(\"!C:\\\\Users\\\\Kfir Even\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\expo-cli\\\\node_modules\\\\style-loader\\\\dist\\\\runtime\\\\injectStylesIntoStyleTag.js\");\n            var content = require(\"!!C:\\\\Users\\\\Kfir Even\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\expo-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js!./mapStyles.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"C:\\\\Users\\\\Kfir Even\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\expo-cli\\\\node_modules\\\\css-loader\\\\dist\\\\runtime\\\\api.js\");\nvar ___CSS_LOADER_GET_URL_IMPORT___ = require(\"C:\\\\Users\\\\Kfir Even\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\expo-cli\\\\node_modules\\\\css-loader\\\\dist\\\\runtime\\\\getUrl.js\");\nvar ___CSS_LOADER_URL_IMPORT_0___ = require(\"../../../assets/img/satImage.jpg\");\nvar ___CSS_LOADER_URL_IMPORT_1___ = require(\"../../../assets/img/radarImage.jpg\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___);\n// Module\nexports.push([module.id, \".map {\\r\\n    background-color: wheat;\\r\\n    width: 100%;\\r\\n    height: 33.333%;\\r\\n    border: 3px solid #C7C6C5;\\r\\n}\\r\\n\\r\\n.mapPlaceholderImg {\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    background-repeat: no-repeat;\\r\\n    background-size: 100% 100%;\\r\\n}\\r\\n\\r\\n.mapSatImage {\\r\\n    background-image:url(\" + ___CSS_LOADER_URL_REPLACEMENT_0___ + \");\\r\\n}\\r\\n\\r\\n.mapRadImage {\\r\\n    background-image:url(\" + ___CSS_LOADER_URL_REPLACEMENT_1___ + \");\\r\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","module.exports = __webpack_public_path__ + \"static/media/satImage.a47ca4a9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/radarImage.c58f8b35.jpg\";","var api = require(\"!C:\\\\Users\\\\Kfir Even\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\expo-cli\\\\node_modules\\\\style-loader\\\\dist\\\\runtime\\\\injectStylesIntoStyleTag.js\");\n            var content = require(\"!!C:\\\\Users\\\\Kfir Even\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\expo-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js!./InfoScreenStyles.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"C:\\\\Users\\\\Kfir Even\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\expo-cli\\\\node_modules\\\\css-loader\\\\dist\\\\runtime\\\\api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".infoScreen {\\r\\n    color: burlywood;\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: center;\\r\\n    padding: 5% 5%;\\r\\n    box-sizing: border-box;\\r\\n}\\r\\n\\r\\n.infoscreenLightMode {\\r\\n    color: #4C4236;\\r\\n}\\r\\n\\r\\n.weatherDays {\\r\\n    justify-content: space-between;\\r\\n    align-items: center;\\r\\n    display: flex;\\r\\n    width: 100%;\\r\\n    height: 33.333%;\\r\\n    margin-top: 3%;\\r\\n}\\r\\n\\r\\n.infoscreenFirstRaw {\\r\\n    justify-content: space-between;\\r\\n    align-items: center;\\r\\n    margin-top: 3%;\\r\\n    height: 33.333%;\\r\\n    width: 100%;\\r\\n    display: flex;\\r\\n}\\r\\n\\r\\n.infoScreenFavBtn {\\r\\n    background-color:#4C4236;\\r\\n    color:white;\\r\\n}\\r\\n\\r\\n.buttonGroupsBackgroundStyle {\\r\\n    /* margin: 0% 5%; */\\r\\n    padding: 3%;\\r\\n    border-radius: 15px;\\r\\n    border: 4px solid #4C4236;\\r\\n    background-color: #A49E98;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    flex-direction: column;\\r\\n}\\r\\n\\r\\n.buttonGroupStyle {\\r\\n    margin: 3%;\\r\\n    display: flex;\\r\\n    flex-direction: row;\\r\\n}\\r\\n\\r\\n.infoScreenBtnGroup {\\r\\n    background-color:slategrey;\\r\\n    color:white;\\r\\n}\\r\\n\\r\\n.infoScreenBtnGroupActive  {\\r\\n    background-color:#4C4236;\\r\\n    color:white;\\r\\n}\\r\\n\\r\\n.quickInfoStyle {\\r\\n    width: 60%;\\r\\n    display: flex;\\r\\n}\\r\\n\\r\\n.quickActionStyle {\\r\\n    width: 40%;\\r\\n    justify-content: space-between;\\r\\n    display: flex;\\r\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!C:\\\\Users\\\\Kfir Even\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\expo-cli\\\\node_modules\\\\style-loader\\\\dist\\\\runtime\\\\injectStylesIntoStyleTag.js\");\n            var content = require(\"!!C:\\\\Users\\\\Kfir Even\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\expo-cli\\\\node_modules\\\\css-loader\\\\dist\\\\cjs.js!./FavoritesScreenStyles.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"C:\\\\Users\\\\Kfir Even\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\expo-cli\\\\node_modules\\\\css-loader\\\\dist\\\\runtime\\\\api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".favoritesScreen {\\r\\n    color: burlywood;\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    align-items: center;\\r\\n    padding: 5% 5%;\\r\\n    box-sizing: border-box;\\r\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","const initialState = {\r\n    cityName: '',\r\n    countryName: '',\r\n    cityCode: '',\r\n    temputure: '',\r\n    weatherStatus: '',\r\n    weatherDay1: '',\r\n    weatherDay2: '',\r\n    weatherDay3: '',\r\n    weatherDay4: '',\r\n    weatherDay5: '',\r\n    isSatView: true\r\n};\r\n\r\nexport const infoScreen = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'SELECTED_CITY_COUNTRY_NAME':\r\n            return Object.assign({}, state, { cityName: action.cityName, countryName: action.countryName, cityCode: action.cityCode });\r\n        case 'SELECTED_TEMP_STATUS':\r\n            return Object.assign({}, state, { temputure: action.temputure, weatherStatus: action.weatherStatus });\r\n        case 'FIVE_DAY_FORECAST':\r\n            return Object.assign({}, state, {\r\n                weatherDay1: action.weatherDay1,\r\n                weatherDay2: action.weatherDay2,\r\n                weatherDay3: action.weatherDay3,\r\n                weatherDay4: action.weatherDay4,\r\n                weatherDay5: action.weatherDay5,\r\n             });\r\n        case 'IS_SET_SATELLITE_VIEW':\r\n            return Object.assign({}, state, { isSatView: action.condition });\r\n        default:\r\n            return state;\r\n    }\r\n};","const initialState = {\r\n    favorites: '',\r\n    isCurrentCityFavorite: false\r\n};\r\n\r\nexport const favoritesScreen = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FILL_CITY_FAVORITE_LIST':\r\n            return Object.assign({}, state, { favorites: action.favs });\r\n        case 'REMOVE_CITY_FROM_FAVORITE_LIST':\r\n            return Object.assign({}, state, { favorites: action.favs });\r\n        case 'ADD_CITY_TO_FAVORITE_LIST':\r\n            return Object.assign({}, state, { favorites: action.favs });\r\n        case 'IS_CITY_IN_FAVORITE_LIST':\r\n            return Object.assign({}, state, { isCurrentCityFavorite: action.condition });\r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport { infoScreen } from \"./components/InfoScreen/infoScreenReducers\";\r\nimport { favoritesScreen } from './components/FavoritesScreen/favoritesScreenReducers';\r\n\r\nconst reducers = combineReducers({\r\n    infoScreen,\r\n    favoritesScreen\r\n});\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    {},\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nexport default store;","import { StyleSheet } from 'react-native'; \r\n\r\nexport const mainStyles = StyleSheet.create({\r\n    menuView: {\r\n        backgroundColor: '#A49E98',\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    menuViewLightMode: {\r\n        backgroundColor: '#d0c7bd'\r\n    },\r\n    mainView: {\r\n        backgroundColor: 'black',\r\n        position: 'relative',\r\n        top: '13%',\r\n        left: '15%',\r\n        width: '85%',\r\n        height: '87%',\r\n        borderTopLeftRadius: '25px'\r\n    },\r\n    mainViewLightMode: {\r\n        backgroundColor: 'white'\r\n    },\r\n    TextStyle: {\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n        letterSpacing: 0.25,\r\n        color: 'white',\r\n    },\r\n    menuButtons: {\r\n        left: 0,\r\n        width: '15%',\r\n        height: '10%',\r\n        borderRadius: 4,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        borderRadius: 4,\r\n        backgroundColor: '#54514E',\r\n        position: 'absolute',\r\n        cursor: 'pointer'\r\n    },\r\n    // menuRightButtons: {\r\n    //     // display: 'flex',\r\n    //     // flexDirection: 'column'\r\n    //     position: 'relative'\r\n    // },\r\n    INFObutton: {\r\n        marginTop: '20%'\r\n    },\r\n    FAVSbutton: {\r\n        marginTop: '30%'\r\n    }\r\n  });\r\n","import React from 'react';\r\nimport { useSelector } from \"react-redux\";\r\nimport './mapStyles.css';\r\n\r\nexport const Map = () => {\r\n    const infoScreen = useSelector(state => state.infoScreen);\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <div className={\"mapPlaceholderImg \" + (infoScreen.isSatView ? \"mapSatImage\" : \"mapRadImage\")}/>\r\n        </div>\r\n    )\r\n}","export const fillFavorites = favs => {\r\n    return {\r\n        type: 'FILL_CITY_FAVORITE_LIST',\r\n        favs\r\n    };\r\n};\r\n\r\nexport const removeFromFavorites = favToRemove => {\r\n    var favs = JSON.parse(localStorage.getItem(\"favorites\"));\r\n    favs.splice(favs.indexOf(favToRemove), 1);\r\n    localStorage.setItem(\"favorites\", JSON.stringify(favs));\r\n\r\n    return {\r\n        type: 'REMOVE_CITY_FROM_FAVORITE_LIST',\r\n        favs\r\n    };\r\n};\r\n\r\nexport const addToFavorites = fav => {\r\n    var favs = JSON.parse(localStorage.getItem(\"favorites\"));\r\n    favs.push(fav);\r\n    localStorage.setItem(\"favorites\", JSON.stringify(favs));\r\n\r\n    return {\r\n        type: 'ADD_CITY_TO_FAVORITE_LIST',\r\n        favs\r\n    };\r\n};\r\n\r\nexport const isCurrentCityFav = condition => {\r\n    return {\r\n        type: 'IS_CITY_IN_FAVORITE_LIST',\r\n        condition\r\n    };\r\n};","import { cityWeatherAPI, fiveDayCityWeatherAPI } from '../../Apis';\r\n\r\nexport const selectedCityCountryNames = (cityName, countryName, cityCode) => {\r\n    return {\r\n        type: 'SELECTED_CITY_COUNTRY_NAME',\r\n        cityName,\r\n        countryName,\r\n        cityCode\r\n    };\r\n};\r\n\r\nexport const selectedCityTempeture = cityCode =>\r\n    (dispatch) => {\r\n    cityWeatherAPI(cityCode).then(res => {\r\n        dispatch(updateSelectedCityTempeture(res));\r\n    });\r\n};\r\n\r\nexport const updateSelectedCityTempeture = res => {\r\n    return {\r\n        type: 'SELECTED_TEMP_STATUS',\r\n        temputure: res[0].Temperature.Metric.Value,\r\n        weatherStatus: res[0].WeatherText\r\n    };\r\n};\r\n\r\nexport const fiveDayForecast = cityCode => \r\n(dispatch) => {\r\n    fiveDayCityWeatherAPI(cityCode).then(res => {\r\n        dispatch(updateFiveDayForecast(res));\r\n    });\r\n};\r\n\r\nexport const updateFiveDayForecast = res => {\r\n    const Days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    return {\r\n        type: 'FIVE_DAY_FORECAST',\r\n        weatherDay1: Days[new Date(res.DailyForecasts[0].Date).getDay()] + '-' + res.DailyForecasts[0].Temperature.Maximum.Value +'-' + res.DailyForecasts[0].Temperature.Minimum.Value,\r\n        weatherDay2: Days[new Date(res.DailyForecasts[1].Date).getDay()] + '-' + res.DailyForecasts[1].Temperature.Maximum.Value +'-' + res.DailyForecasts[1].Temperature.Minimum.Value,\r\n        weatherDay3: Days[new Date(res.DailyForecasts[2].Date).getDay()] + '-' + res.DailyForecasts[2].Temperature.Maximum.Value +'-' + res.DailyForecasts[2].Temperature.Minimum.Value,\r\n        weatherDay4: Days[new Date(res.DailyForecasts[3].Date).getDay()] + '-' + res.DailyForecasts[3].Temperature.Maximum.Value +'-' + res.DailyForecasts[3].Temperature.Minimum.Value,\r\n        weatherDay5: Days[new Date(res.DailyForecasts[4].Date).getDay()] + '-' + res.DailyForecasts[4].Temperature.Maximum.Value +'-' + res.DailyForecasts[4].Temperature.Minimum.Value\r\n    };\r\n};\r\n\r\nexport const isSetSatView = condition => {\r\n    return {\r\n        type: 'IS_SET_SATELLITE_VIEW',\r\n        condition\r\n    };\r\n};","const accuweatherAPIkey = 'kCkqeNIqZtd15XlMY8kZM9AVAUMRVCuZ';\r\n\r\nexport function cityAutoCompleteAPI (q) {\r\n  return fetch('https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=' + accuweatherAPIkey + '&q=' + q)\r\n    .then((response) => { \r\n        return response.json().then((data) => {\r\n            return data;\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        }) \r\n    });\r\n}\r\n\r\nexport function cityWeatherAPI (locKey) {\r\n    return fetch('https://dataservice.accuweather.com/currentconditions/v1/' + locKey + '?apikey=' + accuweatherAPIkey)\r\n    .then((response) => { \r\n        return response.json().then((data) => {\r\n            return data;\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        }) \r\n    });\r\n}\r\n\r\nexport function fiveDayCityWeatherAPI (locKey) {\r\n    return fetch('https://dataservice.accuweather.com/forecasts/v1/daily/5day/' + locKey + '?apikey=' + accuweatherAPIkey +'&metric=true')\r\n    .then((response) => { \r\n        return response.json().then((data) => {\r\n            return data;\r\n        }).catch((err) => {\r\n            console.log(err);\r\n        }) \r\n    });\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { Button, ButtonGroup } from 'react-bootstrap';\r\n\r\nimport { Map } from '../Map/Map';\r\nimport { addToFavorites, removeFromFavorites, isCurrentCityFav } from '../FavoritesScreen/favoritesScreenActions';\r\nimport { isSetSatView } from './infoScreenActions';\r\n\r\nimport './InfoScreenStyles.css';\r\n\r\nclass InfoScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isCelsiusMode: true\r\n        };\r\n    };\r\n\r\n    componentDidUpdate(newProps) {\r\n        if (newProps.infoScreen.cityCode !== this.props.infoScreen.cityCode) {\r\n            this.isExistsInfavorites(this.props.infoScreen.cityName + ', ' + this.props.infoScreen.countryName + '-' + this.props.infoScreen.cityCode);\r\n        }\r\n    };\r\n\r\n    isExistsInfavorites(city) {\r\n        this.props.favoritesScreen.favorites.includes(city) ? this.props.isCurrentCityFav(true) : this.props.isCurrentCityFav(false);\r\n    };\r\n\r\n    handleClickSatRad(e){\r\n        if (e.target.value == 'Satellite') {\r\n            this.props.isSetSatView(true);\r\n        } else {\r\n            this.props.isSetSatView(false);\r\n        }\r\n    };\r\n\r\n    convertToFahrenheit(value) {\r\n       return ((value * (9/5)) + 32).toFixed(1);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"infoScreen\" + (this.props.isDarkMode ? \"\" : \" infoscreenLightMode\")}>\r\n                <Map/>\r\n                <div className=\"infoscreenFirstRaw\">\r\n                    <div className=\"quickInfoStyle\">\r\n                        <div style={{width: '65%'}}>\r\n                            <div style={{fontSize: '6vmin'}}>{this.props.infoScreen.cityName}</div>\r\n                            <div style={{fontSize: '3.7vmin'}}>{this.props.infoScreen.countryName}</div>\r\n                        </div>\r\n                        <div style={{width: '35%'}}>\r\n                            <div style={{fontSize: '4.7vmin'}}>{this.state.isCelsiusMode ? this.props.infoScreen.temputure : this.convertToFahrenheit(this.props.infoScreen.temputure)} °</div>\r\n                            <div style={{fontSize: '4.7vmin'}}>{this.props.infoScreen.weatherStatus}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"quickActionStyle\">\r\n                        <div className=\"buttonGroupsBackgroundStyle\">\r\n                        <ButtonGroup onClick={this.handleClickSatRad.bind(this)} className=\"buttonGroupStyle\">\r\n                            <Button active={this.props.infoScreen.isSatView}\r\n                                    value=\"Satellite\"\r\n                                    className={\"infoScreenBtnGroup \" + (this.props.infoScreen.isSatView ? 'infoScreenBtnGroupActive' : '')}>\r\n                                    Satellite\r\n                            </Button>\r\n                            <Button\r\n                                    active={!this.props.infoScreen.isSatView}\r\n                                    value=\"Radar\"\r\n                                    className={\"infoScreenBtnGroup \" + (!this.props.infoScreen.isSatView ? 'infoScreenBtnGroupActive' : '')}>\r\n                                    Radar\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        {this.props.favoritesScreen.isCurrentCityFavorite ?\r\n                        <Button className=\"infoScreenFavBtn\" onClick={() => {\r\n                            this.props.removeFromFavorites(this.props.infoScreen.cityName + ', ' + this.props.infoScreen.countryName + '-' + this.props.infoScreen.cityCode);\r\n                            this.props.isCurrentCityFav(false);\r\n                        }}>Remove From Favorites</Button>\r\n                        : <Button className=\"infoScreenFavBtn\" onClick={() => {\r\n                            this.props.addToFavorites(this.props.infoScreen.cityName + ', ' + this.props.infoScreen.countryName + '-' + this.props.infoScreen.cityCode);\r\n                            this.props.isCurrentCityFav(true);\r\n                            }}>Add To Favorites</Button>}\r\n                        </div>\r\n                        <div className=\"buttonGroupsBackgroundStyle\">\r\n                        <ButtonGroup className=\"buttonGroupStyle\">\r\n                            <Button active={this.state.isCelsiusMode}\r\n                                    onClick={() => this.setState({isCelsiusMode: true})}\r\n                                    className={\"infoScreenBtnGroup \" + (this.state.isCelsiusMode ? 'infoScreenBtnGroupActive' : '')}>\r\n                                    Celsius\r\n                                    </Button>\r\n                            <Button active={!this.state.isCelsiusMode}\r\n                                    onClick={() => this.setState({isCelsiusMode: false})}\r\n                                    className={\"infoScreenBtnGroup \" + (!this.state.isCelsiusMode ? 'infoScreenBtnGroupActive' : '')}>\r\n                                    Fahrenheit\r\n                                    </Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup>\r\n                            <Button active={this.props.isDarkMode}\r\n                                onClick={() => this.props.setDarkMode(true)}\r\n                                className={\"infoScreenBtnGroup \" + (this.props.isDarkMode ? 'infoScreenBtnGroupActive' : '')}>\r\n                                Dark\r\n                            </Button>\r\n                            <Button active={!this.props.isDarkMode}\r\n                                onClick={() => this.props.setDarkMode(false)}\r\n                                className={\"infoScreenBtnGroup \" + (!this.props.isDarkMode ? 'infoScreenBtnGroupActive' : '')}>\r\n                                Light\r\n                                </Button>\r\n                            <Button className=\"infoScreenBtnGroup\">Auto</Button>\r\n                        </ButtonGroup>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"weatherDays\">\r\n                    <div style={{fontSize: '3.2vmin', whiteSpace: 'pre-line'}}>{\r\n                        this.props.infoScreen.weatherDay1.split('-')[0]+ '\\n\\n↑ '\r\n                        + (this.state.isCelsiusMode ? this.props.infoScreen.weatherDay1.split('-')[1] : this.convertToFahrenheit(this.props.infoScreen.weatherDay1.split('-')[1]))\r\n                        + ' °\\n↓ ' + (this.state.isCelsiusMode ? this.props.infoScreen.weatherDay1.split('-')[2] : this.convertToFahrenheit(this.props.infoScreen.weatherDay1.split('-')[2])) + ' °'}\r\n                    </div>\r\n                    <div style={{fontSize: '3.2vmin', whiteSpace: 'pre-line'}}>{\r\n                        this.props.infoScreen.weatherDay2.split('-')[0]+ '\\n\\n↑ '\r\n                        + (this.state.isCelsiusMode ? this.props.infoScreen.weatherDay2.split('-')[1] : this.convertToFahrenheit(this.props.infoScreen.weatherDay2.split('-')[1]))\r\n                        + ' °\\n↓ ' + (this.state.isCelsiusMode ? this.props.infoScreen.weatherDay2.split('-')[2] : this.convertToFahrenheit(this.props.infoScreen.weatherDay2.split('-')[2])) + ' °'}\r\n                    </div>\r\n                    <div style={{fontSize: '3.2vmin', whiteSpace: 'pre-line'}}>{\r\n                        this.props.infoScreen.weatherDay3.split('-')[0]+ '\\n\\n↑ '\r\n                        + (this.state.isCelsiusMode ? this.props.infoScreen.weatherDay3.split('-')[1] : this.convertToFahrenheit(this.props.infoScreen.weatherDay3.split('-')[1]))\r\n                        + ' °\\n↓ ' + (this.state.isCelsiusMode ? this.props.infoScreen.weatherDay3.split('-')[2] : this.convertToFahrenheit(this.props.infoScreen.weatherDay3.split('-')[2])) + ' °'}\r\n                    </div>\r\n                    <div style={{fontSize: '3.2vmin', whiteSpace: 'pre-line'}}>{\r\n                        this.props.infoScreen.weatherDay4.split('-')[0]+ '\\n\\n↑ '\r\n                        + (this.state.isCelsiusMode ? this.props.infoScreen.weatherDay4.split('-')[1] : this.convertToFahrenheit(this.props.infoScreen.weatherDay4.split('-')[1]))\r\n                        + ' °\\n↓ ' + (this.state.isCelsiusMode ? this.props.infoScreen.weatherDay4.split('-')[2] : this.convertToFahrenheit(this.props.infoScreen.weatherDay4.split('-')[2])) + ' °'}\r\n                    </div>\r\n                    <div style={{fontSize: '3.2vmin', whiteSpace: 'pre-line'}}>{\r\n                        this.props.infoScreen.weatherDay5.split('-')[0]+ '\\n\\n↑ '\r\n                        + (this.state.isCelsiusMode ? this.props.infoScreen.weatherDay5.split('-')[1] : this.convertToFahrenheit(this.props.infoScreen.weatherDay5.split('-')[1]))\r\n                        + ' °\\n↓ ' + (this.state.isCelsiusMode ? this.props.infoScreen.weatherDay5.split('-')[2] : this.convertToFahrenheit(this.props.infoScreen.weatherDay5.split('-')[2])) + ' °'}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        infoScreen: state.infoScreen,\r\n        favoritesScreen: state.favoritesScreen\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { isSetSatView, addToFavorites, removeFromFavorites, isCurrentCityFav })(InfoScreen);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Button } from 'react-bootstrap';\r\nimport { removeFromFavorites } from './favoritesScreenActions';\r\n\r\nimport './FavoritesScreenStyles.css';\r\n\r\nclass FavoritesScreen extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fillTable(this.props.favoritesScreen.favorites);\r\n    }\r\n\r\n    componentDidUpdate(newProps) {\r\n        if (newProps.favoritesScreen.favorites !== this.props.favoritesScreen.favorites) {\r\n            this.clearFavTable();\r\n            this.fillTable(this.props.favoritesScreen.favorites);\r\n        }\r\n    }\r\n    \r\n    clearFavTable() {\r\n        document.getElementById(\"favtab\").remove();\r\n    }\r\n\r\n    favCityClick(fav) {\r\n        this.props.toogleView();\r\n        this.props.fillWeatherInfo({LocalizedName: fav.split(', ')[0], Country: { LocalizedName: fav.split(', ')[1].split('-')[0]}, Key: fav.split('-')[1]});\r\n    }\r\n\r\n    fillTable(favs) {\r\n        var table = document.createElement(\"TABLE\");\r\n        table.setAttribute(\"id\", \"favtab\");\r\n        table.style.cssText = 'width:100%;border-collapse:collapse;';\r\n\r\n        var container = document.getElementById(\"favtabCoontainer\");\r\n        container.appendChild(table);\r\n\r\n        for (var i = 0; i < favs.length; i++) {\r\n                var row = table.insertRow(i);\r\n                var cell1 = row.insertCell(0);\r\n                var cell2 = row.insertCell(1);\r\n\r\n                row.style.cssText = \"border:6px solid black;background-color:#958269;\";\r\n\r\n                const favCityClickBtnId = 'favCityClickBtn' + i;\r\n                const removeFromFavBtnId = 'removeFromFavBtn' + i;\r\n\r\n                cell1.innerHTML = '<Button id=\"' + favCityClickBtnId + '\" style=\"float:left;background-color:#4C4236;color:white;\">' + favs[i].split('-')[0] + '</Button>';\r\n                cell2.innerHTML = '<Button id=\"' + removeFromFavBtnId + '\" style=\"float:right;background-color:#4C4236;color:white;\">Remove From Favorites</Button>';\r\n\r\n                const val = favs[i];\r\n                document.getElementById(favCityClickBtnId).addEventListener(\"click\", () => this.favCityClick(val));\r\n                document.getElementById(removeFromFavBtnId).addEventListener(\"click\", () => this.props.removeFromFavorites(val));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"favtabCoontainer\" className=\"favoritesScreen\"/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    ({ favoritesScreen }) => {\r\n        return {\r\n            favoritesScreen\r\n        };\r\n    }\r\n    , { removeFromFavorites })(FavoritesScreen);","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    View,\r\n    Pressable ,\r\n    Text\r\n  } from 'react-native';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { Autocomplete } from '@material-ui/lab';\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nimport { mainStyles } from './mainStyles.js';\r\n\r\nimport { cityAutoCompleteAPI } from '../../Apis';\r\n\r\nimport InfoScreen from '../InfoScreen/InfoScreen';\r\nimport FavoritesScreen from '../FavoritesScreen/FavoritesScreen';\r\nimport { fillFavorites } from '../FavoritesScreen/favoritesScreenActions';\r\nimport { selectedCityCountryNames, selectedCityTempeture, fiveDayForecast } from '../InfoScreen/infoScreenActions';\r\n\r\nexport const Main = () => {\r\n    const [data, setData] = useState([]);\r\n    const [query, setQuery] = useState('');\r\n    const [isInfoView, setIsInfoView] = useState(true);\r\n    const [isDarkMode, setDarkMode] = useState(true);\r\n\r\n    const favoritesScreen = useSelector(state => state.favoritesScreen);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem(\"favorites\") == null) { // inital run add Tel Aviv City as defualt favorite\r\n            localStorage.setItem(\"favorites\", JSON.stringify(['Tel Aviv, Israel-215854']));\r\n        }\r\n\r\n        dispatch(fillFavorites(JSON.parse(localStorage.getItem(\"favorites\"))));\r\n\r\n        var favs = favoritesScreen.favorites;\r\n        if (favs == []) {\r\n            fillWeatherInfo({LocalizedName: 'Tel Aviv', Country: { LocalizedName:  'Israel'}, Key: '215854'});\r\n        } else {\r\n            fillWeatherInfo({LocalizedName: favs[0].split(', ')[0], Country: { LocalizedName:  favs[0].split(', ')[1].split('-')[0]}, Key: favs[0].split('-')[1]});\r\n        }\r\n    }, []);\r\n\r\n    const fillWeatherInfo = (values) => {\r\n        dispatch(selectedCityCountryNames(values.LocalizedName, values.Country.LocalizedName, values.Key));\r\n        dispatch(selectedCityTempeture(values.Key));\r\n        dispatch(fiveDayForecast(values.Key));\r\n    }\r\n\r\n    const toogleView = () => {\r\n        isInfoView ? setIsInfoView(false) : setIsInfoView(true);\r\n    }\r\n\r\n    return (\r\n            <View style={isDarkMode ? mainStyles.menuView : [mainStyles.menuView, mainStyles.menuViewLightMode]}>\r\n                {isInfoView ? <Autocomplete style={{ width: '80%', position: 'absolute', left: '20%', top: '1%' }}\r\n                    disableClearable\r\n                    forcePopupIcon={false}\r\n                    options={data}\r\n                    label={query}\r\n                    getOptionLabel={option => option.LocalizedName + ', ' + option.Country.LocalizedName}\r\n                    onInputChange={txt => { txt.target.value.length > 1 ? cityAutoCompleteAPI(txt.target.value).then(res => setData(res)) : data}}\r\n                    onChange={(event, values) => {\r\n                        fillWeatherInfo(values);\r\n                    }}\r\n                    renderInput={params => (\r\n                        <TextField {...params} label={'Search City'} variant=\"outlined\" fullWidth />\r\n                    )}\r\n                /> : null}\r\n                {/* <View style={mainStyles.menuRightButtons}> */}\r\n                    <Pressable\r\n                        style={[mainStyles.INFObutton, mainStyles.menuButtons]}\r\n                        title=\"INFO\"\r\n                        onPress={() => setIsInfoView(true)}\r\n                    >\r\n                    <Text style={mainStyles.TextStyle}>INFO</Text>\r\n                    </Pressable>\r\n                    <Pressable\r\n                        style={[mainStyles.FAVSbutton, mainStyles.menuButtons]}\r\n                        title=\"FAVS\"\r\n                        onPress={() => setIsInfoView(false)}\r\n                    >\r\n                        <Text style={mainStyles.TextStyle}>FAVS</Text>\r\n                    </Pressable>\r\n                {/* </View> */}\r\n            <View style={isDarkMode ? mainStyles.mainView : [mainStyles.mainView, mainStyles.mainViewLightMode]}>\r\n               {isInfoView ? <InfoScreen isDarkMode={isDarkMode} setDarkMode={setDarkMode}/> : <FavoritesScreen toogleView={toogleView} fillWeatherInfo={fillWeatherInfo}/>}\r\n               <StatusBar style=\"auto\" />\r\n            </View>\r\n        </View>\r\n    )\r\n}","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './Store';\nimport { Main } from './components/Main/Main';\n\nexport default class App extends Component {\n  render() {\n    return (\n        <Provider store={store}>\n        <Main/>\n        </Provider>\n    )\n  }\n}\n\n"],"sourceRoot":""}